@inherits Fluxor.Blazor.Web.Components.FluxorComponent

@page "/weather"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender:false))

@inject IState<AppState.Weather.WeatherForecastState> WeatherForecastState
@inject IDispatcher dispatcher

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
    <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Models.WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        await Task.CompletedTask;
        dispatcher.Dispatch(new AppState.Weather.WeatherForecastFetched());
        if (WeatherForecastState.Value.Forecasts is not null) forecasts = WeatherForecastState.Value.Forecasts;
    }

    protected override async Task OnAfterRenderAsync(bool firsRender)
    {
        await Task.CompletedTask;
        if (WeatherForecastState.Value.Forecasts is not null) forecasts = WeatherForecastState.Value.Forecasts;
    }
}
